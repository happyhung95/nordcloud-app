{"version":3,"sources":["constants/station.ts","services/calculation.ts","components/Form/Form.tsx","components/SampleResult/SampleResult.tsx","components/AvailableStations/AvailableStations.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stations","x","y","r","findStation","shortestDistance","closestStation","stationPower","map","station","distance","xStart","xEnd","yStart","yEnd","xDistance","Math","pow","yDistance","sqrt","calculateDistance","parseInt","power","undefined","FindStationForm","useState","setStation","setStationPower","coordinate","setCoordinate","validateNumber","input","error","isNaN","Number","className","initialValues","onSubmit","values","setSubmitting","errors","touched","htmlFor","id","name","validate","type","SampleResult","AvailableStations","index","App","href","aria-label","aria-hidden","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fed120da.chunk.js","sourcesContent":["export const stations = [\n  { x: 0, y: 0, r: 10 },\n  { x: 20, y: 20, r: 5 },\n  { x: 10, y: 0, r: 12 },\n]\n","import { stations } from '../constants'\nimport { Station, ClosestStation } from '../types'\n\nexport const calculateDistance = (xStart: number, xEnd: number, yStart: number, yEnd: number) => {\n  const xDistance: number = Math.pow(xEnd - xStart, 2)\n  const yDistance: number = Math.pow(yEnd - yStart, 2)\n\n  return Math.sqrt(xDistance + yDistance)\n}\n\nexport const findStation = (x: string, y: string): ClosestStation => {\n  let shortestDistance: number\n  let closestStation: Station | undefined\n  let stationPower = 0\n\n  stations.map(station => {\n    const distance = calculateDistance(parseInt(x), station.x, parseInt(y), station.y)\n\n    const power = distance > station.r ? 0 : Math.pow(station.r - distance, 2)\n\n    if (power > 0 && (distance < shortestDistance || shortestDistance === undefined)) {\n      shortestDistance = distance\n      closestStation = station\n      stationPower = power\n    }\n  })\n\n  return { closestStation, stationPower }\n}\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\n\nimport { findStation } from '../../services'\nimport { Station, Coordinate } from '../../types'\n\nconst FindStationForm: React.FC = () => {\n  const [station, setStation] = useState<Station>()\n  const [stationPower, setStationPower] = useState<number>(0)\n  const [coordinate, setCoordinate] = useState<Coordinate>()\n\n  const validateNumber = (input: string) => {\n    let error\n    if (isNaN(Number(input))) {\n      error = 'Please input a number!'\n    }\n    return error\n  }\n\n  return (\n    <div className=\"my-4 p-4 border-2 border-blue-900 rounded-xl\">\n      <div className=\"mb-2 text-blue-900 text-xl font-bold\">Find a link station</div>\n      <Formik\n        initialValues={{\n          x: '',\n          y: '',\n        }}\n        onSubmit={(values: Coordinate, { setSubmitting }: FormikHelpers<Coordinate>) => {\n          const { closestStation, stationPower } = findStation(values.x, values.y)\n\n          if (stationPower > 0) {\n            setStation(closestStation)\n            setStationPower(stationPower)\n          } else {\n            setStation(undefined)\n            setStationPower(0)\n          }\n\n          setCoordinate(values)\n          setSubmitting(false)\n        }}\n      >\n        {({ errors, touched }) => (\n          <Form>\n            <div>\n              <label htmlFor=\"x\" className=\"text-blue-900\">x coordinate: </label>\n              <Field id=\"x\" name=\"x\" validate={validateNumber} className=\"px-2 rounded-lg text-gray-500 text-md\" />\n              {errors.x && touched.x && <div className=\"mb-2 text-red-500 text-sm\">{errors.x}</div>}\n            </div>\n            <div className=\"mt-2\">\n              <label htmlFor=\"y\" className=\"text-blue-900\">y coordinate: </label>\n              <Field id=\"y\" name=\"y\" validate={validateNumber} className=\"px-2 rounded-lg text-gray-500 text-md\" />\n              {errors.y && touched.y && <div className=\"mb-2 text-red-500 text-sm\">{errors.y}</div>}\n            </div>\n\n            <button type=\"submit\" className=\"my-2 px-2 py-1 rounded-xl bg-blue-900 text-white text-md font-medium\">Find nearest station</button>\n          </Form>\n        )}\n      </Formik>\n      {coordinate && stationPower !== 0 && (\n        <div className=\"px-2 py-1 bg-blue-100 rounded text-blue-900 font-medium\">\n          Best link station for point ({coordinate?.x},{coordinate?.y}) is ({station?.x},{station?.y}) with power {stationPower}.\n        </div>\n      )}\n      {coordinate && !stationPower && (\n        <div className=\"px-2 py-1 bg-red-100 rounded text-red-500 font-medium\">\n          No link station within reach for point ({coordinate?.x},{coordinate?.y}).\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default FindStationForm\n","import React from 'react'\n\nimport { findStation } from '../../services'\nimport { Coordinate } from '../../types'\n\nconst SampleResult: React.FC<Coordinate> = ({ x, y }) => {\n  const { closestStation, stationPower } = findStation(x, y)\n\n  return (\n    <div className=\"my-2\">\n      <div className=\"text-blue-900 font-bold\">\n        Sample calculation for coordinate ({x},{y}):\n      </div>\n      {stationPower !== 0 ? (\n        <div className=\"px-2 py-1 bg-blue-100 rounded text-blue-900 font-medium\">\n          Best link station for point ({x},{y}) is ({closestStation?.x},{closestStation?.y}) with power {stationPower}.\n        </div>\n      ) : (\n        <div  className=\"px-2 py-1 bg-red-100 rounded text-red-500 font-medium\">\n          No link station within reach for point ({x},{y}).\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default SampleResult\n","import React from 'react'\n\nimport { stations } from '../../constants'\n\nconst AvailableStations: React.FC = () => (\n  <div className=\"my-4 p-4 bg-blue-100 rounded-xl\">\n    <div className=\"mb-1 text-blue-900 text-xl font-bold\">List of available stations' coordinate:</div>\n    {stations.map((station, index) => (\n      <div key={index}>\n        <span className=\"text-blue-900 font-bold\">Station {index + 1}: </span>\n        <span className=\"text-blue-900\">\n          ({station.x},{station.y}).{' '}\n        </span>\n        <span className=\"text-blue-900\">Reach {station.r}.</span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default AvailableStations\n","import 'react-app-polyfill/ie11'\nimport React from 'react'\n\nimport FindStationForm from './components/Form'\nimport SampleResult from './components/SampleResult'\nimport AvailableStations from './components/AvailableStations'\nimport './tailwind.output.css'\n\nconst App = () => {\n  return (\n    <div className=\"h-screen flex justify-center bg-gray-100\">\n      <div>\n        <AvailableStations />\n        <FindStationForm />\n        <SampleResult x={'0'} y={'0'} />\n        <SampleResult x={'100'} y={'100'} />\n        <SampleResult x={'15'} y={'10'} />\n        <SampleResult x={'18'} y={'18'} />\n        <div className=\"my-8\">\n          <a href=\"https://github.com/happyhung95/nordcloud-app\" aria-label=\"Link to Github\" className=\"p-2 rounded-lg bg-black text-white text-lg font-bold\">\n            <i className=\"fab fa-github\" aria-hidden=\"true\" title=\"Link to Github\" />\n            <span className=\"mx-1\">Github repository</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}